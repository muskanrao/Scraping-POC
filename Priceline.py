import requests
import json
'''
url = "https://www.priceline.com/pws/v0/pcln-graph/"

payload = "{\"query\":\"\\n  query airSearchResp($input: AirSearchReq) {\\n    airSearchResp(input: $input) {\\n      \\n  isFireFly\\n  airline {\\n    code\\n    name\\n    smallImage\\n  }\\n  airport {\\n    code\\n    name\\n    city\\n    isoCountryCode\\n    state\\n    country\\n  }\\n  priceGuidance {\\n    high\\n    low\\n    isEligible\\n  }\\n  listingsMetaData {\\n    resultCode\\n    processorID\\n    clientSessionId\\n    searchId\\n    searchSessionKey\\n    requestId\\n    hasExpressDeal\\n    hasAirCanada\\n    hasUpsellOptions\\n    hasClosedUserGroupDeals\\n    cheapestFlightNonStop\\n    minimumRetailPrice\\n    minDurationPrice\\n    minLayoverInMinutes\\n    minDurationInMinutes\\n    nonStopPrice\\n    tripType\\n    minVoidWindowClose\\n    lowerBound\\n    upperBound\\n    totalItineraries\\n    totalFilteredItineraries\\n    creditAvailableSummary {\\n      creditAvailable\\n      airlineName\\n      changeFee\\n    }\\n  }\\n  error {\\n    code\\n    desc\\n    message\\n    status\\n\\t\\treason\\n\\t\\treason_code\\n  }\\n  displayableCarriers\\n  brandReference {\\n    brandId\\n    name\\n    tier\\n    brandAttributes {\\n      type\\n      description\\n      inclusion\\n    }\\n  }\\n  listings {\\n    ... on AirExpressDealsCandidates {\\n      isExpressDeal\\n      id: exID\\n      candidateKey\\n      itemKey\\n      priceKey\\n      sameDayDepartHoursBeforeTravel\\n      sameDayDepartMinsBeforeTravelDial\\n      isSaleEligible\\n      tripType\\n      listingPosition\\n      exdOpenJaw: openJaw\\n      budgetSaver {\\n        tag\\n        longCopy\\n        shortCopy\\n      }\\n      totalPriceWithDecimal {\\n        dollar\\n        cents\\n        price\\n      }\\n      price {\\n        type\\n        currencyCode\\n        currencySymbol\\n        amount\\n        dollar\\n        cents\\n        creditSummary {\\n          creditAvailable\\n          creditApplied\\n          forfeitAmount\\n          changeFee\\n        }\\n      }\\n      alternateDatesTexts {\\n        dateRange\\n        numberOfDays\\n      }\\n      slice {\\n        id\\n        sliceKey\\n        maximumStops\\n        cabinClass\\n        mayArriveNextDay\\n        carryOnBagOption\\n        allowedEquipment\\n        arrivalWindow {\\n          start\\n          end\\n          exclusionStart\\n          exclusionEnd\\n        }\\n        departureWindow {\\n          start\\n          end\\n          exclusionStart\\n          exclusionEnd\\n        }\\n        origin {\\n          code\\n        }\\n        destination {\\n          code\\n        }\\n        alternateOriginAirport\\n        alternateDestinationAirport\\n      }\\n      pricingInfo {\\n        currencyCode\\n        baseFare\\n        totalFare: totalTripCost\\n        comparativeRetailPrice\\n        savings {\\n          inPercent\\n          inDollars\\n        }\\n      }\\n    }\\n\\n    ... on AirListingsRtlItinerary {\\n      isExchangeFlight\\n      id\\n      groupId\\n      refKey\\n      refId\\n      candidateKey\\n      itemKey\\n      priceKey\\n      saleSavings\\n      isSaleEligible\\n      seatsAvailable\\n      isFused\\n      isCugEligible\\n      isFareFamily\\n      isBEC\\n      isUABE\\n      candidateId\\n      listingPosition\\n      upsellNotice\\n      isExchangeFlight\\n      fareBrands {\\n        priceKey\\n        isSelected\\n        pricing {\\n            amount\\n            text\\n            amountInFloat\\n        }\\n        name\\n        ancillaries {\\n          name\\n          tag\\n          offerType\\n          coreAttribute\\n        }\\n        price {\\n          type\\n          amount\\n          dollar\\n          cents\\n        }\\n        isDowngrade\\n      }\\n      price {\\n        type\\n        currencyCode\\n        currencySymbol\\n        amount\\n        dollar\\n        cents\\n        creditSummary {\\n          creditAvailable\\n          creditApplied\\n          forfeitAmount\\n          changeFee\\n        }\\n        packagesPricingInfo {\\n          savings {\\n            totalStrikeThroughPrice\\n            totalSavings\\n            perPersonSavings\\n            perPersonStrikeThroughPrice\\n          }\\n          totalPayLater\\n          totalPayNow\\n          totalHotelFees\\n        }\\n      }\\n      allFareBrandNames\\n      allFareBrandAttributes {\\n        description\\n        inclusion\\n        type\\n      }\\n      alternateDatesTexts {\\n        dateRange\\n        numberOfDays\\n      }\\n      merchandising\\n      openJaw {\\n        departing {\\n          origin\\n          destination\\n        }\\n        returning {\\n          origin\\n          destination\\n        }\\n      }\\n      marketingAirlines {\\n        code\\n        name\\n        image\\n        covidAttrs {\\n          noChangeFees\\n          mandatoryMask\\n          healthCert\\n          tempChecks\\n          extraCleaning\\n          middleSeatBlocked\\n          reducedOnboard\\n        }\\n      }\\n      airlines {\\n        marketingAirline\\n        name\\n        code\\n        image\\n        covidAttrs {\\n          noChangeFees\\n          mandatoryMask\\n          healthCert\\n          tempChecks\\n          extraCleaning\\n          middleSeatBlocked\\n          reducedOnboard\\n        }\\n      }\\n      slices {\\n        id\\n        merchandising\\n        uniqueSliceId\\n        sliceKey\\n        isSelected\\n        duration\\n        durationInMinutes\\n        stops\\n        layoverLocations\\n        isOvernight\\n        overnightDays\\n        layoverDurations\\n        totalLayoverDurationsInMinutes\\n        displayText {\\n          operatedByText\\n        }\\n        arrival {\\n          airport\\n          time\\n          datetime\\n          title\\n        }\\n        departing {\\n          airport\\n          time\\n          datetime\\n          title\\n        }\\n        departInfo {\\n          airport {\\n            code\\n            name\\n            isoCountryCode\\n            displayLocation\\n          }\\n          time {\\n            dateTime\\n            displayTime\\n            displayDate\\n          }\\n        }\\n        arrivalInfo {\\n          airport {\\n            code\\n            name\\n            isoCountryCode\\n            displayLocation\\n          }\\n          time {\\n            dateTime\\n            displayTime\\n            displayDate\\n          }\\n        }\\n        layoverInfo {\\n          id\\n          duration\\n          airport {\\n            code\\n            name\\n          }\\n        }\\n        segments {\\n          stopQuantity\\n          isOvernight\\n          seatsAvailable\\n          equipment\\n          id\\n          uniqueSegId\\n          airport\\n          time\\n          datetime\\n          title\\n          marketingAirline\\n          operatingAirline\\n          flightNumber\\n          formattedDate\\n          cabinClass\\n          isBEC\\n          isUABE\\n          upsellNotice\\n          duration\\n          isSubjectToGovtApproval\\n          fareBasisCode\\n          departInfo {\\n            airport {\\n              code\\n              name\\n            }\\n            time {\\n              dateTime\\n              displayTime\\n              displayDate\\n            }\\n          }\\n          arrivalInfo {\\n            airport {\\n              code\\n              name\\n            }\\n            time {\\n              dateTime\\n              displayTime\\n              displayDate\\n            }\\n          }\\n        }\\n      }\\n      voidWindowInfo {\\n        timeStamp\\n        tzDesignator\\n        cancelTimeZone\\n        clientUTCDateTime\\n        hoursLeft\\n      }\\n      totalPriceWithDecimal {\\n        dollar\\n        cents\\n        price\\n      }\\n      operatedByAirlines {\\n        flightNumber\\n        airline\\n      }\\n    }\\n  }\\n  filterDefaults {\\n    DEFAULT_TAB_ITEMS {\\n      label\\n      name\\n    }\\n    NUM_OF_STOPS {\\n      primaryLabel\\n      value\\n      checked\\n      secondaryLabel\\n      wrapLabel\\n      disabled\\n    }\\n    AIRLINES {\\n      value\\n      primaryLabel\\n      secondaryLabel\\n      checked\\n      disabled\\n    }\\n    AIRPORTS {\\n      originAirports {\\n        value\\n        primaryLabel\\n        disabled\\n        checked\\n        secondaryLabel\\n        minPrice\\n      }\\n\\n      destinationAirports {\\n        value\\n        primaryLabel\\n        disabled\\n        checked\\n        secondaryLabel\\n        minPrice\\n      }\\n    }\\n    DEFAULT_TIME {\\n      minTakeoffTime\\n      maxTakeoffTime\\n      minLandingTime\\n      maxLandingTime\\n      sliceDurationMin\\n      sliceDurationMax\\n      inputDurationValue\\n      sliceRefId\\n      destinationCode\\n      originCode\\n    }\\n    TIME {\\n      minTakeoffTime\\n      maxTakeoffTime\\n      minLandingTime\\n      maxLandingTime\\n      sliceDurationMin\\n      sliceDurationMax\\n      inputDurationValue\\n      sliceRefId\\n      destinationCode\\n      originCode\\n    }\\n    DATE {\\n      value\\n      primaryLabel\\n      secondaryLabel\\n      checked\\n      disabled\\n      wrapLabel\\n      isExact\\n    }\\n    SLICE_ARRAY {\\n      sliceRefId\\n      minDuration\\n      maxDuration\\n      minTakeoffTime\\n      maxTakeoffTime\\n      minLandingTime\\n      maxLandingTime\\n    }\\n  }\\n\\n\\n    }\\n  }\\n\",\"variables\":{\"input\":{\"client\":\"PCLN_FLIGHTS\",\"requestId\":\"6400aede-1cd0-4e13-979b-e0f9af72a5c0\",\"searchId\":null,\"clientSessionId\":\"09cb1363-fa42-490b-a59b-2c265b4432d4\",\"itineraryType\":\"ROUND_TRIP\",\"searchSessionKey\":\"1ad9e9aa-0ab4-4446-934f-a119e9f0c68e\",\"cache\":null,\"allowAlternateDates\":false,\"slices\":[{\"sliceId\":1,\"origins\":[{\"location\":\"DEL\",\"type\":\"AIRPORT\"}],\"destinations\":[{\"location\":\"BOM\",\"type\":\"AIRPORT\"}],\"departDate\":\"2024-02-08\",\"sortOptions\":[\"UNIQUE_SLICE\",\"LOWEST_PRICE\"]},{\"sliceId\":2,\"origins\":[{\"location\":\"BOM\",\"type\":\"AIRPORT\"}],\"destinations\":[{\"location\":\"DEL\",\"type\":\"AIRPORT\"}],\"departDate\":\"2024-03-25\",\"sortOptions\":[\"UNIQUE_SLICE\",\"LOWEST_PRICE\"]}],\"seti\":{\"AIR_SEARCH_SBS_TRANSFORM_FLYQL\":true},\"expFlags\":{\"AIR_ENABLE_CHILD_PRICING\":false,\"enableLapInfants\":false,\"AIR_LISTINGS_RESURFACE_SOPQ\":true},\"plfCode\":\"PCLN\",\"isFireFly\":true,\"isUSOnly\":false,\"appCode\":\"DESKTOP\",\"filter\":{\"sliceFilters\":[{\"sliceKey\":\"7012024-02-08T06:30SGSGDELBOM0\",\"sliceId\":1,\"attributes\":[]},{\"sliceId\":2,\"numOfStops\":7,\"stopsFilterType\":\"MAX\",\"inclusiveDepartTimeRange\":[],\"inclusiveArriveTimeRange\":[],\"attributes\":[]}],\"exactDateFilters\":[]},\"passengers\":{\"adults\":1,\"children\":0,\"youth\":0,\"infants\":0},\"displayParameters\":{\"sliceRefId\":[2],\"lowerBound\":1,\"upperBound\":30},\"searchOptions\":{\"preferredCarriers\":null,\"excludedCarriers\":null,\"maxLayoverDurationInMinutes\":null,\"stopsFilterType\":null,\"jetOnly\":false,\"cabinClass\":\"ECO\",\"includeFusedItineraries\":true,\"upsell\":false},\"includeFareBasisCode\":true,\"expressDeal\":null,\"sortPrefs\":[{\"priority\":1,\"type\":\"PRICE\",\"sliceRefId\":1,\"order\":\"ASC\"},{\"priority\":1,\"type\":\"TRAVELTIME\",\"sliceRefId\":-1,\"order\":\"ASC\"},{\"priority\":1,\"type\":\"TRAVELTIME\",\"sliceRefId\":1,\"order\":\"ASC\"},{\"priority\":1,\"type\":\"DEPARTTIME\",\"sliceRefId\":1,\"order\":\"ASC\"},{\"priority\":1,\"type\":\"DEPARTTIME\",\"sliceRefId\":2,\"order\":\"ASC\"}],\"referrals\":[{\"external\":{\"refClickId\":\"d:cBRAND16833033680g46024356910410941049160aud-948005695399:kwd-437316168364|9179076|\",\"refId\":\"GOOGLECPCB\",\"referralSourceId\":\"PL\"}}],\"mergeItineraryList\":true,\"uncheckFilterInitialRequest\":false}}}"
headers = {
  'authority': 'www.priceline.com',
  'accept': 'application/json, text/plain, */*',
  'accept-language': 'en-GB,en-US;q=0.9,en;q=0.8',
  'apollographql-client-name': 'fly-graph',
  'apollographql-client-version': 'master-1.0.1128',
  'cache-control': 'no-cache',
  'cguid': 'c6249e5fbfa0304b3a47c4798b76b1f5',
  'content-type': 'application/json',
  'cookie': 'PL_CINFO=c6249e5fbfa0304b3a47c4798b76b1f5~1706786588~v2; SITESERVER=ID=c6249e5fbfa0304b3a47c4798b76b1f5; vid=v202402010623084521e464; Referral=CLICKID=d%3AcBRAND16833033680g46024356910410941049160aud-948005695399%3Akwd-437316168364%7C9179076%7C&WEBENTRYTIME=2%2F1%2F2024%2006%3A23%3A08&ID=GOOGLECPCB&PRODUCTID=&SOURCEID=PL; _pxvid=47710c41-c0f4-11ee-a695-ac4be1c8b3e8; pxcts=47711c80-c0f4-11ee-a695-309b5b3a54e3; ftr_blst_1h=1706786590024; should_log_to_splunk=false; load_fs_for_user=false; __pxvid=479551ee-c0f4-11ee-8962-0242ac120004; _scid=ff52e6a9-f14a-4c28-b733-4b86859cbcf3; _scid_r=ff52e6a9-f14a-4c28-b733-4b86859cbcf3; __pdst=27fefe2c5ab44a8b99e10158df8afe33; _fbp=fb.1.1706786590456.377975743; _gcl_aw=GCL.1706786591.Cj0KCQiAn-2tBhDVARIsAGmStVkwDWkWm-_M1TSvadc1QgnE48DNQnxiv5bs9Fy41l1kck1tI-vaUv8aAtChEALw_wcB; _gcl_au=1.1.344721421.1706786591; _tt_enable_cookie=1; _ttp=TbJLMXRPYtOr-fACezejbyBa3nb; AMP_TOKEN=%24NOT_FOUND; _gid=GA1.2.1218109860.1706786591; _pxhd=VVcL-pTIfHduVP8FXsjU4FstcaS3ZM0CSf36E1goqLFrTygewdeNGXkzJ5pjO8VnBPx22ShMAEG2Ifoxe/8EAg==:eo0V2Fzu-W/bdCkO2K8PzyNMA7kzUurPgNZgj9e9xJmACEd-KyxCnIfRHbhS4/I2lILnePf3CxzxCLxIVQGfLJToAmF/SBfeZk9N0jAjQpQ=; _sctr=1%7C1706725800000; __gads=ID=09edfe4a03584477:T=1706786592:RT=1706786592:S=ALNI_MasmPaaXiNZ3nkp44mg_lfQ97UA5Q; __gpi=UID=00000cf5bb12bb27:T=1706786592:RT=1706786592:S=ALNI_MZKXUfQpAc0axbsQHxzZyOzSmRsnQ; __eoi=ID=2d736b4776211357:T=1706786592:RT=1706786592:S=AA-AfjaqZ2hSzh_AGhlY6IwyFh3A; tracker_device=7852822b-1f38-4b5a-99b1-d25a1de020ce; air_ond=DEL-BOM,DEL-BOM; cto_bundle=UxxfXV83T3hwdENJbG9zVTl1cW5BNkJ5dmUzNDVoWWFXNHRyQm03WiUyQiUyQmVXNTlnSG5ia2xZUzdBeGxUQ2dsJTJGMXFIMG9ZRiUyQlo1SkNYYmcwak1kdnJDOHpJUHRvSmo4WXI0TXliRjBvb2kzUzBERFlKQ0RlS24zVUxHYzM3QVRUMmIyaXBGRTREM0tKa2NQZnQ2VUZnSFFYWko1NW1oQkZRSlJEbUclMkZEMm8yVTFxcXgyMHZXcFdRZGc2YnVFJTJGdTl4WEtuRDdHaFByaDBQdXNZSlBFdzQ3R1VqNiUyQjgzRWh0MiUyRmxxclREVjd2anFGTUtwbmV1N3B0eU5OJTJCcVk0V0EwUG5DQ09j; _gac_UA-2975581-1=1.1706786833.Cj0KCQiAn-2tBhDVARIsAGmStVkwDWkWm-_M1TSvadc1QgnE48DNQnxiv5bs9Fy41l1kck1tI-vaUv8aAtChEALw_wcB; forterToken=d46e5cd165d348aea3b5de5a9785a8fc_1706786847955__UDF43-m4_17ck; OptanonConsent=isIABGlobal=false&datestamp=Thu+Feb+01+2024+16%3A57%3A31+GMT%2B0530+(India+Standard+Time)&version=6.6.0&hosts=&consentId=a904caf5-3304-48cd-89a5-c5d3c8c1d3a4&interactionCount=0&landingPath=NotLandingPage&groups=C0001%3A1%2CC0002%3A1%2CC0004%3A1%2CC0003%3A1%2CSPD_BG%3A1&AwaitingReconsent=false; utag_main=v_id:018d64688d9d00020d028a7ba0a005075014d06d00942$_sn:1$_se:4$_ss:0$_st:1706788662164$ses_id:1706786590109%3Bexp-session$_pn:4%3Bexp-session$cookiesyncran:true%3Bexp-session$dc_visit:1$dc_event:3%3Bexp-session$dc_region:ap-east-1%3Bexp-session; _uetsid=47d2e340c0f411eeadedbd4157decdeb; _uetvid=47d30490c0f411ee9bddd13963e994aa; _ga=GA1.1.474669200.1706786590; FCNEC=%5B%5B%22AKsRol_rciVJTVbLm_wtIE9dSsQa6vRPHLgZ89Q9BmAMIFiWOcaSxgcsoeSkwJrlb9BwrCVYxg-dFjVxX5yTEQFBm1V-X19TgivCjrRdxL6YLrSP5Yhh5wbwHEwS2rIzeIxN1V0k83KyWxvh86Ius-GcZhSpAEsfEg%3D%3D%22%5D%5D; _px2=eyJ1IjoiZTE1NWU0YzAtYzBmNC0xMWVlLTgwZGItNDljZTgyODM3ZmE0IiwidiI6IjQ3Zjc2MTlmLWMwZjQtMTFlZS05ZTNmLWRlYjg2ZjQ3YTQ1ZCIsInQiOjE3MDY3ODczOTM0NzMsImgiOiI5ZTA5ZWU1N2UyMWMzOWEyM2Y1ZGI1ZjE0MDdkMDJmYjBjNjEwNmMxNDdlMWRlZmUwNjI2MGU3M2I0OTFhZjQ3In0=; _pxde=7016dc2ea3327bec35f193f79478442bc0188b7094450668156f6a08bd50400e:eyJ0aW1lc3RhbXAiOjE3MDY3ODcwOTM0NzMsImZfa2IiOjB9; _ga_DC72C50JN6=GS1.1.1706786590.1.1.1706787170.60.0.0; _pxhd=VVcL-pTIfHduVP8FXsjU4FstcaS3ZM0CSf36E1goqLFrTygewdeNGXkzJ5pjO8VnBPx22ShMAEG2Ifoxe/8EAg==:eo0V2Fzu-W/bdCkO2K8PzyNMA7kzUurPgNZgj9e9xJmACEd-KyxCnIfRHbhS4/I2lILnePf3CxzxCLxIVQGfLJToAmF/SBfeZk9N0jAjQpQ=',
  'newrelic': 'eyJ2IjpbMCwxXSwiZCI6eyJ0eSI6IkJyb3dzZXIiLCJhYyI6IjI0MDYzNTUiLCJhcCI6IjI0MDUzNTY4OSIsImlkIjoiNjQxYjJjNjdlNWM5OWQxZCIsInRyIjoiYTdhNzY0NWI5NjE1OGFlMjg2OTMyMjY0MGVkZDEzNTkiLCJ0aSI6MTcwNjc4NzE3MDk1OH19',
  'origin': 'https://www.priceline.com',
  'pragma': 'no-cache',
  'referer': 'https://www.priceline.com/m/fly/search/DEL-BOM-20240208/BOM-DEL-20240325/?cabin-class=ECO&no-date-search=false&search-type=0000&num-adults=1',
  'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
  'sec-ch-ua-mobile': '?0',
  'sec-ch-ua-platform': '"macOS"',
  'sec-fetch-dest': 'empty',
  'sec-fetch-mode': 'cors',
  'sec-fetch-site': 'same-origin',
  'traceparent': '00-a7a7645b96158ae2869322640edd1359-641b2c67e5c99d1d-01',
  'tracestate': '2406355@nr=0-1-2406355-240535689-641b2c67e5c99d1d----1706787170958',
  'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
  'workflow-id': 'WORKFLOW_ID_1b8ad8c3-3c99-4484-9a02-98d0f020da0c',
  'x-newrelic-id': 'VgIHV1VWDRACV1hbAQIPUVw=',
  'x-pcln-search-source': 'appname:mflysearch-pagename:listing-searchtype:ugs'
}

response = requests.request("POST", url, headers=headers, data=payload)

print(response.text)
'''

with open('Priceline_json.json', 'r') as file:
    # 2. Read the contents
    json_data = file.read()

    # 3. Parse the JSON
    data = json.loads(json_data)

import json

# Read JSON data from file
with open('Priceline_json.json', 'r') as f:
    data = json.load(f)

# Extracting information and storing in a dictionary
flights_info = {}
listings = data['data']['airSearchResp']['listings']
for listing in listings:
    slice_key = listing['slices'][0]['sliceKey']
    price = listing['price'][0]['amount']
    arrival_airport_code = listing['slices'][0]['arrivalInfo']['airport']['code']
    dest_airport_code = listing['slices'][0]['departInfo']['airport']['code']
    arrival_datetime = listing['slices'][0]['arrivalInfo']['time']['dateTime']
    depart_datetime = listing['slices'][0]['departInfo']['time']['dateTime']

    flights_info[slice_key] = {
        'price': price,
        'arrival_airport_code': arrival_airport_code,
        'dest_airport_code': dest_airport_code,
        'arrival_datetime': arrival_datetime,
        'depart_datetime': depart_datetime
    }

# Printing the dictionary
print("Flight Information:")
for slice_key, info in flights_info.items():
    print("Slice Key:", slice_key)
    print("Price:", info['price'])
    print("Arrival Airport Code:", info['arrival_airport_code'])
    print("Destination Airport Code:", info['dest_airport_code'])
    print("Arrival Datetime:", info['arrival_datetime'])
    print("Depart Datetime:", info['depart_datetime'])
    print()
